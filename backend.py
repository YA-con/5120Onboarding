# -*- coding: utf-8 -*-
"""FLASK_API.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13JiJ-rXbqTR7O0Us8MTFbYR7_CX8FgrF
"""

import requests
from supabase import create_client, Client
from flask import Flask, request, jsonify

# ðŸ”¹ Initialize Flask App
app = Flask(__name__)

# ðŸ”¹ Supabase Credentials
SUPABASE_URL = "https://bonlsqtztvgrpibxuspq.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJvbmxzcXR6dHZncnBpYnh1c3BxIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0MTkxNDIzMiwiZXhwIjoyMDU3NDkwMjMyfQ.Uo83NJoweuqT4aEWsfqqUTJV-2ggsSh075gYP-Q8UXU"
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# ðŸ”¹ OpenWeather API Key
OPENWEATHER_API_KEY = "8b2861635a3e4e5f11edaf3a3b79675f"

# ðŸ”¹ UV Index Risk Levels & Clothing Recommendations
UV_RECOMMENDATIONS = [
    {"min": 0, "max": 2, "risk": "Low", "clothing": [
        "Regular clothing is fine.",
        "Sunglasses optional."
    ]},
    {"min": 3, "max": 5, "risk": "Moderate", "clothing": [
        "Lightweight, long-sleeved shirt and pants.",
        "Hat with a brim.",
        "Sunglasses with UV protection.",
        "Apply sunscreen (SPF 30+)."
    ]},
    {"min": 6, "max": 7, "risk": "High", "clothing": [
        "Long-sleeved, tightly woven clothing.",
        "Wide-brimmed hat.",
        "UV-blocking sunglasses.",
        "Sunscreen (SPF 30+), reapply every 2 hours."
    ]},
    {"min": 8, "max": 10, "risk": "Very High", "clothing": [
        "UV-protective clothing (UPF 50+ recommended).",
        "Dark, tightly woven fabrics.",
        "Broad-brimmed hat.",
        "Sunglasses with 100% UV protection.",
        "SPF 50+ sunscreen, reapply frequently.",
        "Seek shade when possible."
    ]},
    {"min": 11, "max": 100, "risk": "Extreme", "clothing": [
        "Full-coverage UV-protective clothing (UPF 50+).",
        "Dark-colored, tightly woven fabrics.",
        "Broad-brimmed hat (avoid straw hats with holes).",
        "Wrap-around UV-blocking sunglasses.",
        "SPF 50+ sunscreen, reapply every 2 hours.",
        "Avoid direct sun exposure between 10 AM - 4 PM."
    ]}
]

def get_lat_lon_from_db(user_input):
    """Fetch latitude and longitude from Supabase based on postcode or suburb."""
    try:
        if user_input.isdigit():
            response = supabase.table("location").select("lat, long, suburb").eq("postcode", user_input).execute()
        else:
            response = supabase.table("location").select("lat, long, suburb").ilike("suburb", user_input).execute()

        if response.data:
            lat = response.data[0]["lat"]
            lon = response.data[0]["long"]
            suburb_name = response.data[0]["suburb"]
            return lat, lon, suburb_name
        else:
            return None, None, None
    except Exception as e:
        print(f"Database error: {e}")
        return None, None, None

def get_uv_index(lat, lon):
    """Fetch the current UV index from OpenWeather API using latitude & longitude."""
    url = f"https://api.openweathermap.org/data/3.0/onecall?lat={lat}&lon={lon}&exclude=hourly,daily&appid={OPENWEATHER_API_KEY}"

    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            uv_index = data["current"]["uvi"]  # Extract UV index
            return uv_index
        else:
            print(f"API Error: {response.text}")
            return None
    except Exception as e:
        print(f"API Request Failed: {e}")
        return None

def get_uv_risk_and_recommendations(uv_index):
    """Determine the UV risk level and clothing recommendations based on UV index."""
    for category in UV_RECOMMENDATIONS:
        if category["min"] <= uv_index <= category["max"]:
            return category["risk"], category["clothing"]
    return "Unknown", []

@app.route('/get_uv_index', methods=['GET'])
def get_uv_index_api():
    """API endpoint to get UV index, risk level, and clothing recommendations."""
    user_input = request.args.get('location')  # Get 'location' parameter from request

    if not user_input:
        return jsonify({"error": "Please provide a suburb or postcode"}), 400

    # Retrieve latitude, longitude, and suburb name
    lat, lon, suburb_name = get_lat_lon_from_db(user_input)

    if lat is None or lon is None or suburb_name is None:
        return jsonify({"error": "Location not found in database"}), 404

    # Fetch UV Index
    uv_index = get_uv_index(lat, lon)

    if uv_index is None:
        return jsonify({"error": "Unable to fetch UV Index"}), 500

    # Get UV risk level and clothing recommendations
    uv_risk, clothing_recommendations = get_uv_risk_and_recommendations(uv_index)

    return jsonify({
        "suburb": suburb_name,
        "latitude": lat,
        "longitude": lon,
        "uv_index": uv_index,
        "uv_risk": uv_risk,
        "clothing_recommendations": clothing_recommendations
    })

if __name__ == '__main__':
    app.run(debug=True)